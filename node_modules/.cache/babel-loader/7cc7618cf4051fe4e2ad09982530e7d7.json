{"ast":null,"code":"// import {configureStore} from '@reduxjs/toolkit'\n\nimport { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\n// const redux = require('redux');\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialCounterState,\n  reducers: {\n    Increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    IncreaseBy(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    //payload is a default in reduxtoolkit action\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst AuthSlice = createSlice({\n  name: 'auth',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n  }\n});\n// const counterReducer = (state = initialState, action) => {\n//     if (action.type === 'Increment') {\n\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n//     if (action.type === 'decrement') {\n\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n//     if (action.type === 'IncreaseBy') {\n\n//         return {\n//             counter: state.counter + action.Amount,\n//             showCounter: state.showCounter\n//         };\n//     }\n//     if (action.type === 'toggle') {\n//         return {\n//             showCounter: !state.showCounter,\n//             counter: state.counter\n//         }\n//     }\n//     return state\n// }\n\n// const store= configureStore(counterReducer);\n// const store = createStore(counterReducer);\n// const store = createStore(counterSlice); we may use slice like this but to merge multiple slices we have to use configure store\n// const store = configureStore({\n//     reducer: { counter: counterSlice.reducer,  } // may merge multiple reducers like this\n// })\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: AuthSlice.reducer\n  }\n});\n\n// // const counterSubscriber =()=> {\n// //    const latestState = store.getState()\n// //     console.log(latestState)\n// // }\n// // store.subscribe(counterSubscriber)\n// // store.dispatch( {type:'increment'})\n// // store.dispatch( {type:'decrement'})\n\nexport const counterAction = counterSlice.actions;\nexport const AuthAction = AuthSlice.actions;\nexport default store;","map":{"version":3,"names":["createStore","createSlice","configureStore","initialCounterState","counter","showCounter","counterSlice","name","reducers","Increment","state","decrement","IncreaseBy","action","payload","toggle","initialAuthState","isAuthenticated","AuthSlice","initialState","login","logout","store","reducer","auth","counterAction","actions","AuthAction"],"sources":["C:/Users/Maaz Khalid/Desktop/practice work start/02-starting-project/src/store/index.js"],"sourcesContent":["// import {configureStore} from '@reduxjs/toolkit'\r\n\r\nimport { createStore } from 'redux';\r\nimport { createSlice, configureStore } from '@reduxjs/toolkit'\r\n// const redux = require('redux');\r\nconst initialCounterState = { counter: 0, showCounter: true }\r\nconst counterSlice =  createSlice({\r\n    name: 'counter',\r\n    initialCounterState,\r\n    reducers: {\r\n        Increment(state) { \r\n            state.counter++;\r\n         },\r\n        decrement(state) {\r\n            state.counter--;\r\n         },\r\n        IncreaseBy(state, action) {\r\n            state.counter = state.counter + action.payload         },//payload is a default in reduxtoolkit action\r\n        toggle(state){\r\n            state.showCounter = !state.showCounter;\r\n         }\r\n    }\r\n})\r\nconst initialAuthState = { \r\n    isAuthenticated: false\r\n}\r\nconst AuthSlice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialAuthState,\r\n    reducers :{\r\n        login(state){\r\n            state.isAuthenticated= true;\r\n        },\r\n        logout(state){\r\n            state.isAuthenticated= false;\r\n        }\r\n\r\n    }\r\n})\r\n// const counterReducer = (state = initialState, action) => {\r\n//     if (action.type === 'Increment') {\r\n\r\n//         return {\r\n//             counter: state.counter + 1,\r\n//             showCounter: state.showCounter\r\n//         };\r\n//     }\r\n//     if (action.type === 'decrement') {\r\n\r\n//         return {\r\n//             counter: state.counter - 1,\r\n//             showCounter: state.showCounter\r\n//         };\r\n//     }\r\n//     if (action.type === 'IncreaseBy') {\r\n\r\n//         return {\r\n//             counter: state.counter + action.Amount,\r\n//             showCounter: state.showCounter\r\n//         };\r\n//     }\r\n//     if (action.type === 'toggle') {\r\n//         return {\r\n//             showCounter: !state.showCounter,\r\n//             counter: state.counter\r\n//         }\r\n//     }\r\n//     return state\r\n// }\r\n\r\n// const store= configureStore(counterReducer);\r\n// const store = createStore(counterReducer);\r\n// const store = createStore(counterSlice); we may use slice like this but to merge multiple slices we have to use configure store\r\n// const store = configureStore({\r\n//     reducer: { counter: counterSlice.reducer,  } // may merge multiple reducers like this\r\n// })\r\nconst store = configureStore({\r\n    reducer: {\r\n        counter :counterSlice.reducer,\r\n        auth : AuthSlice.reducer\r\n    }\r\n});\r\n\r\n\r\n\r\n// // const counterSubscriber =()=> {\r\n// //    const latestState = store.getState()\r\n// //     console.log(latestState)\r\n// // }\r\n// // store.subscribe(counterSubscriber)\r\n// // store.dispatch( {type:'increment'})\r\n// // store.dispatch( {type:'decrement'})\r\n\r\nexport const counterAction = counterSlice.actions;\r\nexport const AuthAction = AuthSlice.actions;\r\nexport default store;"],"mappings":"AAAA;;AAEA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAC9D;AACA,MAAMC,mBAAmB,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;AAC7D,MAAMC,YAAY,GAAIL,WAAW,CAAC;EAC9BM,IAAI,EAAE,SAAS;EACfJ,mBAAmB;EACnBK,QAAQ,EAAE;IACNC,SAAS,CAACC,KAAK,EAAE;MACbA,KAAK,CAACN,OAAO,EAAE;IAClB,CAAC;IACFO,SAAS,CAACD,KAAK,EAAE;MACbA,KAAK,CAACN,OAAO,EAAE;IAClB,CAAC;IACFQ,UAAU,CAACF,KAAK,EAAEG,MAAM,EAAE;MACtBH,KAAK,CAACN,OAAO,GAAGM,KAAK,CAACN,OAAO,GAAGS,MAAM,CAACC,OAAO;IAAS,CAAC;IAAC;IAC7DC,MAAM,CAACL,KAAK,EAAC;MACTA,KAAK,CAACL,WAAW,GAAG,CAACK,KAAK,CAACL,WAAW;IACzC;EACL;AACJ,CAAC,CAAC;AACF,MAAMW,gBAAgB,GAAG;EACrBC,eAAe,EAAE;AACrB,CAAC;AACD,MAAMC,SAAS,GAAGjB,WAAW,CAAC;EAC1BM,IAAI,EAAE,MAAM;EACZY,YAAY,EAAEH,gBAAgB;EAC9BR,QAAQ,EAAE;IACNY,KAAK,CAACV,KAAK,EAAC;MACRA,KAAK,CAACO,eAAe,GAAE,IAAI;IAC/B,CAAC;IACDI,MAAM,CAACX,KAAK,EAAC;MACTA,KAAK,CAACO,eAAe,GAAE,KAAK;IAChC;EAEJ;AACJ,CAAC,CAAC;AACF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMK,KAAK,GAAGpB,cAAc,CAAC;EACzBqB,OAAO,EAAE;IACLnB,OAAO,EAAEE,YAAY,CAACiB,OAAO;IAC7BC,IAAI,EAAGN,SAAS,CAACK;EACrB;AACJ,CAAC,CAAC;;AAIF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAME,aAAa,GAAGnB,YAAY,CAACoB,OAAO;AACjD,OAAO,MAAMC,UAAU,GAAGT,SAAS,CAACQ,OAAO;AAC3C,eAAeJ,KAAK"},"metadata":{},"sourceType":"module"}